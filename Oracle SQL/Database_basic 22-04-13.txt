/* system계정에서 실행한다. 	*/
/* Oracle 12c 이상의 CDB 사용자 생성을 위해 c##을 붙인다 	*/
DROP USER c##madang CASCADE;
CREATE USER c##madang IDENTIFIED BY madang DEFAULT TABLESPACE users TEMPORARY TABLESPACE temp PROFILE DEFAULT;
GRANT CONNECT, RESOURCE TO c##madang;
GRANT CREATE VIEW, CREATE SYNONYM TO c##madang;
GRANT UNLIMITED TABLESPACE TO c##madang;
ALTER USER c##madang ACCOUNT UNLOCK;

/* 여기서부터는 마당 계정으로 접속 */
conn c##madang/madang;

CREATE TABLE Book (
bookid NUMBER(2) PRIMARY KEY,
bookname VARCHAR2(40),
publisher VARCHAR2(40),
price NUMBER(8)
);

CREATE TABLE Customer (
custid NUMBER(2) PRIMARY KEY,
name VARCHAR2(40),
address VARCHAR2(50),
phone VARCHAR2(20)
);

CREATE TABLE Orders (
orderid NUMBER(2) PRIMARY KEY,
custid NUMBER(2) REFERENCES Customer(custid),
bookid NUMBER(2) REFERENCES Book(bookid),
saleprice NUMBER(8),
orderdate DATE
);

/* Book, Customer, Orders 데이터 생성 */
INSERT INTO Book VALUES(1, '축구의 역사', '굿스포츠', 7000);
INSERT INTO Book VALUES(2, '축구아는 여자', '나무수', 13000);
INSERT INTO Book VALUES(3, '축구의 이해', '대한미디어', 22000);
INSERT INTO Book VALUES(4, '골프 바이블', '대한미디어', 35000);
INSERT INTO Book VALUES(5, '피겨 교본', '굿스포츠', 8000);
INSERT INTO Book VALUES(6, '역도 단계별기술', '굿스포츠', 6000);
INSERT INTO Book VALUES(7, '야구의 추억', '이상미디어', 20000);
INSERT INTO Book VALUES(8, '야구를 부탁해', '이상미디어', 13000);
INSERT INTO Book VALUES(9, '올림픽 이야기', '삼성당', 7500);
INSERT INTO Book VALUES(10, 'Olympic Champions', 'Pearson', 13000);

INSERT INTO Customer VALUES (1, '박지성', '영국 맨체스타', '000-5000-0001');
INSERT INTO Customer VALUES (2, '김연아', '대한민국 서울', '000-6000-0001');
INSERT INTO Customer VALUES (3, '장미란', '대한민국 강원도', '000-7000-0001');
INSERT INTO Customer VALUES (4, '추신수', '미국 클리블랜드', '000-8000-0001');
INSERT INTO Customer VALUES (5, '박세리', '대한민국 대전', NULL);

INSERT INTO Orders VALUES (1, 1, 1, 6000, TO_DATE('2020-07-01','yyyy-mm-dd'));
INSERT INTO Orders VALUES (2, 1, 3, 21000, TO_DATE('2020-07-03','yyyy-mm-dd'));
INSERT INTO Orders VALUES (3, 2, 5, 8000, TO_DATE('2020-07-03','yyyy-mm-dd'));
INSERT INTO Orders VALUES (4, 3, 6, 6000, TO_DATE('2020-07-04','yyyy-mm-dd'));
INSERT INTO Orders VALUES (5, 4, 7, 20000, TO_DATE('2020-07-05','yyyy-mm-dd'));
INSERT INTO Orders VALUES (6, 1, 2, 12000, TO_DATE('2020-07-07','yyyy-mm-dd'));
INSERT INTO Orders VALUES (7, 4, 8, 13000, TO_DATE('2020-07-07','yyyy-mm-dd'));
INSERT INTO Orders VALUES (8, 3, 10, 12000, TO_DATE('2020-07-08','yyyy-mm-dd'));
INSERT INTO Orders VALUES (9, 2, 10, 7000, TO_DATE('2020-07-09','yyyy-mm-dd'));
INSERT INTO Orders VALUES (10, 3, 8, 13000, TO_DATE('2020-07-10','yyyy-mm-dd'));

CREATE TABLE Imported_Book (
bookid NUMBER,
bookname VARCHAR(40),
publisher VARCHAR(40),
price NUMBER(8)
);

INSERT INTO Imported_Book VALUES(21, 'Zen Golf', 'Pearson', 12000);
INSERT INTO Imported_Book VALUES(22, 'Soccer Skills', 'Human Kinetics', 15000);

COMMIT;

SELECT

FROM

WHERE(조건문)

WHERE ( 개체 ) BEWEEN ( 단위1 ) and ( 단위2 ) == 단위1 이상 단위2 이하
AS : 목록 변경

WHERE price = 7000; -- 7000원인책 검색
WHERE price <> 7000; -- 7000원이 아닌책 검색 
LIKE = 문자열에서의 부등호 역할
IS NULL , IS NOT NULL -- 해당 값이 NULL인지 아닌지 비교하는 문법.

&& || (AND OR) 은 그냥 AND OR 쓰면댐 

where price 

IN NOT IN 

WHERE price IN (10000 ,20000 ,30000)

where publisher NOT IN ('굿스포츠' , '대한미디어') ;

%: 0글자 이상의 문자

_: 1글자 문자 

ex) WHERE bookname LIKE  '_구%
언더바는 무조건 한글자 %는 0부터 무한 
-> 책이름에 2번쨰 글자가 '구'인 책 출력

where 밑에 
ORDER BY 속성이름 ASC / DESC;

쓸수있다 ASC 는 오름차순 
   DESC 는 내림차순

집계함수 SELECT 에서 
SUM(속성명) 
AVG()
MIN()
MAX()
COUNT()

아무 것도 넣을 것 없을 때 ex 전체 몇 개? 별 넣으면 된다

GROUP BY (그룹으로 묶을때)
ex) SELECT custid , count(*) , sum(saleprice)
FROM orders
GROUP BY custid;

HAVING = group by에 대한 조건 
WHERE은 전체에 대한 조건이다

중복제거 DISTINCT

테이블 2개를 합치는 방법

SELECT SUM(saleprice) as "박지성이 주문한 총 판매액"
FROM customer ,orders
WHERE customer.custid = orders.custid AND customer.name LIKE '박지성' ;

테이블 별명 지어주기 
SELECT c.name , o.saleprice
FROM customer c ,orders o
WHERE c.custid = o.custid;


1. SELECT COUNT(*) AS TOTAL_ROW
FROM contacts;

2. SELECT website
FROM customers
WHERE name LIKE 'Apple';

3. SELECT website
FROM customers
WHERE name IN ('Apple', 'Oracle', 'eBay');

4. SELECT name, credit_limit
FROM customers
ORDER BY credit_limit DESC;

5. SELECT name, address
FROM customers
WHERE address LIKE '%Bangalore%';

6. SELECT DISTINCT job_title
FROM employees;

7. SELECT COUNT(DISTINCT job_title)
FROM employees;

8. SELECT first_name, job_title
FROM employees;
WHERE job_title LIKE 'Programmer';

10. SELECT first_name, job_title
FROM employees
WHERE manager_id IS NULL; 

11. SELECT first_name
FROM employees
WHERE manager_id = (SELECT employee_id
                    FROM employees
                    WHERE first_name LIKE 'Mohammad')

12. SELECT first_name, job_title
FROM employees
WHERE manager_id = (SELECT employee_id
                    FROM employees
                    WHERE first_name LIKE 'Tommy') AND job_title LIKE 'Sales Manager' OR job_title LIKE 'Stock Manager';
